FORMAT: 1A
HOST: https://petstore.swagger.wordnik.com/v2

# Swagger Petstore
This is a sample server Petstore server.

[Learn about Swagger](http://swagger.wordnik.com) or join the IRC channel `#swagger` on irc.freenode.net.

For this sample, you can use the api key `special-key` to test the authorization filters


## Group Resources

### /pets

#### Add a new pet to the store [POST]

This is a fairly long description about the API request /pets with Method POST

+ Request
    + Headers
```
        Content-Type: application/json
```
    + Schema
```
        {
          "$ref": "#/definitions/Pet"
        }
```

+ Response 200

#### Update an existing pet [PUT]

+ Request
    + Headers
```
        Content-Type: application/json
```
    + Schema
```
        {
          "$ref": "#/definitions/Pet"
        }
```

+ Response 200

### /pets/findByStatus{?status}

#### Finds Pets by status [GET]

Multiple status values can be provided with comma seperated strings

+ Parameters
    + status (array, optional) - Status values that need to be considered for filter
```
        {
          "type": "array",
          "x-title": "status",
          "items": {
            "type": "string"
          }
        }
```

+ Response 200

### /pets/findByTags{?tags}

#### Finds Pets by tags [GET]

Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.

+ Parameters
    + tags (array, optional) - Tags to filter by
```
        {
          "type": "array",
          "x-title": "tags",
          "items": {
            "type": "string"
          }
        }
```

+ Response 200

### /pets/{petId}

#### Find pet by ID [GET]

Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions

+ Response 200

#### Updates a pet in the store with form data [POST]

+ Request
    + Headers
```
        Content-Type: application/x-www-form-urlencoded
```
    + Schema
```
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "x-title": "name"
            },
            "status": {
              "type": "string",
              "x-title": "status"
            }
          }
        }
```

+ Response 200

#### Deletes a pet [DELETE]

+ Request
    + Headers
```
        api_key: null
        Content-Type: application/json
```

+ Response 200

### /stores/order

#### Place an order for a pet [POST]

+ Request
    + Headers
```
        Content-Type: application/json
```
    + Schema
```
        {
          "$ref": "#/definitions/Order"
        }
```

+ Response 200

### /stores/order/{orderId}

#### Find purchase order by ID [GET]

For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions

+ Response 200

#### Delete purchase order by ID [DELETE]

For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors

+ Request
    + Headers
```
        Content-Type: application/json
```

+ Response 200

### /users

#### Create user [POST]

This can only be done by the logged in user.

+ Request
    + Headers
```
        Content-Type: application/json
```
    + Schema
```
        {
          "$ref": "#/definitions/User"
        }
```

+ Response 200

### /users/createWithArray

#### Creates list of users with given input array [POST]

+ Request
    + Headers
```
        Content-Type: application/json
```
    + Schema
```
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
```

+ Response 200

### /users/createWithList

#### Creates list of users with given input array [POST]

+ Request
    + Headers
```
        Content-Type: application/json
```
    + Schema
```
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
```

+ Response 200

### /users/login{?username,password}

#### Logs user into the system [GET]

+ Parameters
    + username (string, optional) - The user name for login
```
        {
          "type": "string",
          "x-title": "username"
        }
```

    + password (string, optional) - The password for login in clear text
```
        {
          "type": "string",
          "x-title": "password"
        }
```

+ Response 200

### /users/logout

#### Logs out current logged in user session [GET]

+ Response 200

### /users/{username}

#### Get user by user name [GET]

+ Response 200

#### Updated user [PUT]

This can only be done by the logged in user.

+ Request
    + Headers
```
        Content-Type: application/json
```
    + Schema
```
        {
          "$ref": "#/definitions/User"
        }
```

+ Response 200

#### Delete user [DELETE]

This can only be done by the logged in user.

+ Request
    + Headers
```
        Content-Type: application/json
```

+ Response 200

# Data Structures

## User (object)
```
    {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "pet": {
          "$ref": "#/definitions/Pet"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      }
    }
```

## Category (object)
```
    {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    }
```

## Pet (object)
```
    {
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "photoUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store"
        }
      }
    }
```

## Tag (object)
```
    {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    }
```

## Order (object)
```
    {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status"
        },
        "complete": {
          "type": "boolean"
        }
      }
    }
```
